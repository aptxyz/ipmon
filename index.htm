<!DOCTYPE html>
<html>

<head>

	<meta content="text/html; charset=utf-8" http-equiv="content-type" />
	<title>IPMON</title>
	<style>
		html, body {
			width: 100%;
			height: 100%;
			padding: 0;
			margin: 0;
			display: flex;
			flex-flow: column nowrap;
		}
		#ipmon, canvas {
			width: 90%;
			margin: 10px auto;
			flex-grow: 1;
		}
		nav {
			height: 50px;
			width: 90%;
			margin: 10px auto;
			background: rgba(255,0,0,0.1);
			display: flex;
			flex-flow: row nowrap;
			padding: 0;
			// align-items: center;
			// justify-content: space-between;
		}
		a {
			background: rgba(128, 128, 128, 0.1);
			flex-grow: 1;
			display: flex;
			align-items: center;
			justify-content: center;
		}
		a:hover {
			cursor: pointer;
			background: rgba(255,0,0,0.2);
		}
		a.selected {
			background: rgba(255,0,0,0.15);
			font-weight: bold;
			font-size: 150%;
		}

	</style>
	<script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
	<script src="//code.highcharts.com/4.0.3/highcharts.js"></script>
	<script src="//cdnjs.cloudflare.com/ajax/libs/datejs/1.0/date.min.js"></script>
	
</head>

<body>
	
	<div id="ipmon"></div>
	<nav></nav>


	<script>

		var ipmon = {};
		ipmon.resetD = 24;  // Bandwidth Cycle Start on # of Every Month
		
		ipmon.b2s = function(bytes) {
			var sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB'];
			if (bytes == 0) return 0;
			var i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));
			return Math.round(bytes / Math.pow(1024, i) * 10) / 10 + ' ' + sizes[i];
		};
		ipmon.pad = function(n) {
 		   return (n < 10) ? ("0" + n) : n;
		};
		ipmon.daily = function(onMonth) {
		
			var resetD = ipmon.resetD;

			if (onMonth)	{ onMonth = Date.parse(onMonth + '-' + '01', 'yyyy-MM-dd'); }
			else	 		{ onMonth = new Date().add( - ( resetD - 1 )).days().moveToFirstDayOfMonth(); }

			var month = onMonth.clone().toString('yyyy MMM');
			var i = onMonth.clone().add( resetD - 1 ).days();
			var f = onMonth.clone().add(1).months().add( resetD - 2 ).days();

			var dates = [i,f];
			
			while (true) {

				var temp = dates[dates.length-2].clone().add(1).days();
				
				if ( temp.isBefore(f) ) {dates.splice(-1,0,temp)}
				else 					 {
											for (var j = 0; j < dates.length; j++) {
												dates[j] = dates[j].toString("yyyy-MM-dd");
											};
											break;
										 }
				
			};

			ipmon.select('daily',dates, month);
			ipmon.resetLink(onMonth, onMonth.clone().toString('MMM'));

		};
		ipmon.monthly = function(onYear) {
		
			var resetD = ipmon.resetD;

			if (onYear)		{ onYear = Date.parse(onYear + '-01-01', 'yyyy-MM-dd'); }
			else	 		{ onYear = new Date().add( - ( resetD - 1 )).days() }

			var year = onYear.clone().toString('yyyy');
			var y = onYear.clone().toString('yy');

			var dates = [];
			
			for (var i = 1; i <= 12; i++) {
			
				dates.push(y + ipmon.pad(i));
			
			};

			ipmon.select('monthly',dates, year);
			ipmon.resetLink(onYear,year);
		
		};
		ipmon.select = function(table, dates, title) {
		
			$.getJSON('index.php', {select: table, i: dates[0], f: dates[dates.length-1]}, function(result) {
				
				var data = result.data;
				var mac = JSON.parse(result.mac);
				var highchartDatas = [];
				var total = 0;

				
				for (var i = 0; i < mac.length; i++) {
				
					var user = mac[i];
					// ['00:00:00:00:00:00','192.168.0.255','device name'
					
					var macid = i;
					var macstring = user[0];
					var ip = user[1];
					var name = user[2];
					
					if (name == '*') {
						name = macstring;
						macstring = '';
					};
					


					var bandwidths = [];
					var ups = {};
					var downs = {};
					
					

					for (var j = 0; j < dates.length; j++) {
					
						var columnName = dates[j];
						
						if (columnName.length == 10) {
							var xAxis = columnName.substring(5);
						} else if (columnName.length == 4) {
// 							var tempName = '20' + columnName
							var m = '20' + columnName.substring(0,2) + '-' + columnName.substring(2);
							var xAxis = Date.parse(m,'yyyy-MM').toString('yyyy MMM');
						};
						
						
						if (data && data[columnName]) {
						
							var column = data[columnName];
							
							for (var k = 0; k < column.length; k++) {

								var columnUser = column[k];
								// columnUser = [15,2978324,167262665]
								
								var cid = columnUser[0];
								var up = Number(columnUser[1]);
								var down = Number(columnUser[2]);
								var bandwidth = up + down;
							
								if (macid == cid) {
									
									ups[xAxis] = up;
									downs[xAxis] = down;
									bandwidths.push(bandwidth);
									if (macid != 0) total += bandwidth;
									
									break;
									
								};
								
							};
							
						};
						
						if (bandwidths[j] == undefined) {
							
							ups[xAxis] = 0;
							downs[xAxis] = 0;
							bandwidths.push(0);
							
						};
						

					};

					var item = {
						mac: macstring,
						ip: ip,
						name: name,
						ups: ups,
						downs: downs,
						data: bandwidths,
					};
					
					// ignore item with zero bandwidth
					for (var j = 0; j < bandwidths.length; j++) {
						
						if (bandwidths[j] > 0) {
							if (macid != 0) highchartDatas.push(item);
							break;
						};
						
					};

				};
				for (var i = 0; i < dates.length; i++) {
					
					if (dates[i].length == 10) {
						dates[i] = dates[i].substring(5);
					} else if (dates[i].length == 4) {
						var m = '20' + dates[i].substring(0,2) + '-' + dates[i].substring(2);
						dates[i] = Date.parse(m,'yyyy-MM').toString('yyyy MMM');
					};
					
				};
				if (!highchartDatas.length) {
				
					var emptyData = [];
					for (var i = 0; i < dates.length; i++) {emptyData.push(0);};
					highchartDatas.push({
						name: 'no data',
						data: emptyData
					});
				};
				
				$('#ipmon').highcharts({
					chart: {
						type: 'column',
					},
					title: {
						text: title + (total ? ' (' + ipmon.b2s(total) + ')': '')
					},
					xAxis: {
						categories: dates,
						// type: 'category',
						labels: {
							rotation: (table == 'daily' ? -30 : 0 ) ,
							x: (table == 'daily' ? 10 : 0 ),
							style: {
								fontSize: (table == 'daily' ? 9 : 11 ) + 'px',
							},
						},
					},
					yAxis: {
						min: 0,
						title: {
							text: ''
						},
						stackLabels: {
							enabled: false,
							style: {
								fontWeight: 'bold',
								color: (Highcharts.theme && Highcharts.theme.textColor) || 'gray'
							}
						}
					},
					legend: {
						align: 'right',
						verticalAlign: 'middle',
						layout: "vertical",
						enabled: true,
						width: 250,
						backgroundColor: (Highcharts.theme && Highcharts.theme.background2) || 'white',
						borderColor: '#CCC',
						borderWidth: 1,
						shadow: false
					},
					tooltip: {
						useHTML: true,
						formatter: function() {
						
							var s = this.series.userOptions;
							
							var t = ipmon.b2s(this.y);
							var u = ipmon.b2s(s.ups[this.x]);
							var d = ipmon.b2s(s.downs[this.x]);
							
							
							
								return '<b>' + s.name + '</b>' + '<br />' +
										'<div style="margin-bottom: 5px; font-size: 8.5px;">' +
											s.ip + '<br />' +  s.mac +
										'</div>' +
										
										'up: ' + u + '<br />' +
										'down: ' + d + '<br />'+
										'<b style="color: red; top: 0px">' + t + '</b>';
								
						}
					},
					plotOptions: {
						column: {
							stacking: 'normal',
							dataLabels: {
								enabled: false,
								color: (Highcharts.theme && Highcharts.theme.dataLabelsColor) || 'white',
								style: {
									textShadow: '0 0 3px black, 0 0 3px black'
								}
							}
						}
					},
					series: highchartDatas
				});

				
			});

	
		};
		ipmon.total = function() {
		
			ipmon.resetLink(new Date(),'Total');

			$.getJSON('index.php', {select: 'total'}, function(data) {
				
				
				
				var highchartDatas = [];
				
				
				
				var other = {
					name: 'other',
					names: [],
					up: 0,
					down: 0,
					y: 0,
				};
				
				for (var i = 0; i < data.length; i++) {
					
					var user = data[i];
					// user = ['mac','ip','name','up','down'];
					var mac = user[0];
					var ip = user[1];
					var name = user[2];
					var up = Number(user[3]);
					var down = Number(user[4]);
					var bandwidth = up + down;
					
					
					if (name == 'Everyone') {
						var totalUp = up;
						var totalDown = down;
						var total = bandwidth;
						continue;
					}
					else if (name == '*') {
					
						name = mac;
						mac = '';
					
					};
					
					
					if (bandwidth / total > 0.01) {
					
						highchartDatas.push({
							name: name,
							ip: ip,
							mac: mac,
							up: up,
							down: down,
							y: bandwidth
						});
					
					} else {
					
						other.names.push(name);
						other.up += up;
						other.down += down;
						other.y += bandwidth
					
					};
					
				};
				
				other.names.sort();
				highchartDatas.push(other);
				
				
				
				$('#ipmon').highcharts({
						chart: {
							plotBackgroundColor: null,
							plotBorderWidth: 1,//null,
							plotShadow: false,
						},
						title: {
							text: 'All Time (' + ipmon.b2s(total) + ')'
						},
					tooltip: {
						useHTML: true,
						formatter: function() {
						
							var p = this.point;
							
							var name = p.name;
							var ip = p.ip;
							var mac = p.mac;
							var up = ipmon.b2s(p.up);
							var down = ipmon.b2s(p.down);
							var total = ipmon.b2s(this.y);
							
							var subinfo;
							if (name == 'other') {
							
								subinfo = p.names.join('<br />');
							
							}
							else {
								subinfo = ip + '<br />' +  mac;
							};

							
							return '<b>' + name + '</b>' + '<br />' +
									'<div style="margin-bottom: 5px; font-size: 8.5px;">' +
										subinfo +
									'</div>' +
									
									'up: ' + up + '<br />' +
									'down: ' + down + '<br />'+
									'<b style="color: red; top: 0px">' + total + '</b>';
							// return this.point.yo;
							
							
							var t = ipmon.b2s(this.y);
							var u = ipmon.b2s(s.ups[this.x]);
							var d = ipmon.b2s(s.downs[this.x]);
							
							
							

								// 'Total: '+ this.point.stackTotal;
						}
					},
						plotOptions: {
							pie: {
								allowPointSelect: true,
								cursor: 'pointer',
								dataLabels: {
									enabled: true,
									formatter: function() {
										return '<b>' + this.point.name + '</b>: ' + ipmon.b2s(this.y);
									},
									style: {
										color: (Highcharts.theme && Highcharts.theme.contrastTextColor) || 'black'
									}
								},
							}
						},
						series: [{
							type: 'pie',
							// name: 'All Time',
							data: highchartDatas
						}]
					});
					

			
			});
			
		};
		ipmon.resetLink = function(time, selected) {
		
			var nav = $('nav');
			
			$('nav').empty();
			$('#ipmon').empty();
			
			var y1 = time.clone().add(-1).years().toString('yyyy');
			var y2 = time.clone().toString('yyyy');
			var month = [];
			for (var i = 0; i < 12; i++) {
				month[i] = Date.parse(y2 + '-' + ipmon.pad(i+1) + '-01','yyyy-MM-dd').toString('MMM');
			};
			var y3 = time.clone().add(1).years().toString('yyyy');
			var T = 'Total';
			
			var content = '' + 
			// '<div class="years">' +
				'<a class="year">' + y1 + '</a>' +
				// '<div class="year">' + 
					'<a class="year">' + y2 + '</a>' +
					// '<div class="month">' + 
						'<a class="month">' + month[0] + '</a>' +
						'<a class="month">' + month[1] + '</a>' +
						'<a class="month">' + month[2] + '</a>' +
						'<a class="month">' + month[3] + '</a>' +
						'<a class="month">' + month[4] + '</a>' +
						'<a class="month">' + month[5] + '</a>' +
						'<a class="month">' + month[6] + '</a>' +
						'<a class="month">' + month[7] + '</a>' +
						'<a class="month">' + month[8] + '</a>' +
						'<a class="month">' + month[9] + '</a>' +
						'<a class="month">' + month[10] + '</a>' +
						'<a class="month">' + month[11] + '</a>' +
					// '</div>' +
				// '</div>' +
				'<a class="year">' + y3 + '</a>' +
			// '</div>' +
			'<a class="total">' + T + '</a>';
			
			
			
			
			
			nav.append(content);
			
			$('a.year').on('click',function() {
			
				ipmon.monthly(this.text);
				return false;
			
			});
			$('a.month').on('click', function() {
			
				var input = Date.parse(y2 + '-' + this.text + '-01', 'yyyy-MMM-dd').toString('yyyy-MM');
				
				ipmon.daily(input);
				return false;
			
			});
			$('a.total').on('click', function() {
			
				ipmon.total();
				return false;
				
			});
			$('a').each(function(index) {
			
				if (this.text == selected) $(this).addClass('selected');
			
			});
		
		};


		ipmon.daily();
		

	</script>
	
	

</body>
</html>
